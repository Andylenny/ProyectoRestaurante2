/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectorestaurante.vistas;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectorestaurante.AccesoAdatos.MesaData;
import proyectorestaurante.AccesoAdatos.PedidoData;
import proyectorestaurante.AccesoAdatos.ProductoData;
import proyectorestaurante.entidades.Mesa;
import proyectorestaurante.entidades.Pedido;
import proyectorestaurante.entidades.Producto;

/**
 *
 * @author pc
 */
public class CajaVista extends javax.swing.JInternalFrame {
    private DefaultTableModel modeloPediente = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    private DefaultTableModel modeloPago = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    private DefaultTableModel modeloCobrar = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    /**
     * Creates new form CajaVista
     */
   private MesaData mesa = new MesaData();
    private PedidoData pedidoData= new PedidoData();
    private ProductoData productoData=new ProductoData();
    private Mesa mesa1 = new Mesa();
    private Pedido pedido=new Pedido();
    private ArrayList<Mesa> listaMesas;
    private ArrayList<Pedido> listaPedidos;
    private ArrayList<Pedido> listaPagos;
    private ArrayList<Pedido> listaGuardar=new ArrayList();
    public CajaVista() {
        initComponents();
        armarCabecera1();
        armarCabecera2();
        armarCabecera3();
        cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pagos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        acobrar = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        pendiente = new javax.swing.JTable();
        combo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        Cobrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        pagos.setBackground(new java.awt.Color(255, 153, 102));
        pagos.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        pagos.setForeground(new java.awt.Color(0, 0, 0));
        pagos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(pagos);

        acobrar.setBackground(new java.awt.Color(255, 153, 102));
        acobrar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        acobrar.setForeground(new java.awt.Color(0, 0, 0));
        acobrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        acobrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acobrarMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(acobrar);

        pendiente.setBackground(new java.awt.Color(255, 153, 102));
        pendiente.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        pendiente.setForeground(new java.awt.Color(0, 0, 0));
        pendiente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        pendiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pendienteMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(pendiente);

        combo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mesa");

        Cobrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectorestaurante/recursos/dolar.png"))); // NOI18N
        Cobrar.setText("Cobrar");
        Cobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CobrarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel2.setText("Total:$");

        Total.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Total.setText("0.00");

        jLabel4.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Pedidos Pagos");

        jLabel5.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Platos Pedidos");

        jLabel6.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Pedidos a cobrar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(Total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Cobrar)
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(69, 69, 69))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Total)
                            .addComponent(Cobrar))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
        try {
            
        mesa1=(Mesa) combo.getSelectedItem();
         if (mesa1 != null) {
        listaPagos=(ArrayList<Pedido>) pedidoData.listarPedidosPorMesaP(mesa1.getIdMesa());
        armarTablaPagos();
        listaPedidos=(ArrayList<Pedido>) pedidoData.listarPedidosPorMesaI(mesa1.getIdMesa());
        armarTablaPendiente();
         }else{
              JOptionPane.showMessageDialog(this, "Seleccione una mesa válida.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los pedidos: " + e.getMessage());
        }
         
                              
    }//GEN-LAST:event_comboActionPerformed

    private void pendienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pendienteMouseClicked
        // TODO add your handling code here:
        int fila = pendiente.getSelectedRow();
        if (fila >= 0) {
            try {
                String estado = (String) modeloPediente.getValueAt(fila, 6);
                if (estado.equals("Entregado")) {
                    int id = (int) modeloPediente.getValueAt(fila, 0);
                    pedido = pedidoData.buscarPedidoCodigo(id);
                } else {
                    JOptionPane.showMessageDialog(this, "Seleccione un pedido entregado.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al seleccionar el pedido: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto.");
        }
        intercambio();
        armarTablaPendiente();
        armarTablaCobrar();
        total();
    }//GEN-LAST:event_pendienteMouseClicked

    private void acobrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acobrarMouseClicked
        // TODO add your handling code here:
        int fila = acobrar.getSelectedRow();
        if (fila >= 0) {
            try {
                int id = (int) modeloCobrar.getValueAt(fila, 0);
                pedido = pedidoData.buscarPedidoCodigo(id);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al seleccionar el pedido a cobrar: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto.");
        }
        intercambioC();
        armarTablaPendiente();
        armarTablaCobrar();
        total();
    }//GEN-LAST:event_acobrarMouseClicked

    private void CobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CobrarActionPerformed
        // TODO add your handling code here:
       try {
            for (Pedido x : listaGuardar) {
                pedidoData.modificarPedido(x);
            }
            listaPagos = (ArrayList<Pedido>) pedidoData.listarPedidosPorMesaP(mesa1.getIdMesa());
            armarTablaPagos();
            listaGuardar = new ArrayList();
            armarTablaCobrar();
            total();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al realizar el cobro: " + e.getMessage());
        }
    }//GEN-LAST:event_CobrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cobrar;
    private javax.swing.JLabel Total;
    private javax.swing.JTable acobrar;
    private javax.swing.JComboBox<Mesa> combo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable pagos;
    private javax.swing.JTable pendiente;
    // End of variables declaration//GEN-END:variables
    private void cargarCombo(){
        listaMesas=(ArrayList<Mesa>) mesa.listarMesas();
        for(Mesa m:listaMesas){
            combo.addItem(m);
        }
    }
    private void armarCabecera1() {
        ArrayList<Object> columnas = new ArrayList<>();
        modeloPediente.addColumn("Id Pedido");
        modeloPediente.addColumn("Hora");
        modeloPediente.addColumn("Producto");
        modeloPediente.addColumn("Cantidad");
        modeloPediente.addColumn("Precio unidad");
        modeloPediente.addColumn("Total");
        modeloPediente.addColumn("Estado");
        pendiente.setModel(modeloPediente);
    }
    private void borrarFilas1(){
        int filas = pendiente.getRowCount() -1;
        for (int f = filas; f >= 0; f--) {
            modeloPediente.removeRow(f);
        }
    }
    private void armarCabecera2() {
        ArrayList<Object> columnas = new ArrayList<>();
        modeloPago.addColumn("Id Pedido");
        modeloPago.addColumn("Hora");
        modeloPago.addColumn("Producto");
        modeloPago.addColumn("Cantidad");
        modeloPago.addColumn("Precio unidad");
        modeloPago.addColumn("Total");
        pagos.setModel(modeloPago);
    }
    private void borrarFilas2(){
        int filas = pagos.getRowCount() -1;
        for (int f = filas; f >= 0; f--) {
            modeloPago.removeRow(f);
        }
    }
    private void armarCabecera3() {
        ArrayList<Object> columnas = new ArrayList<>();
        modeloCobrar.addColumn("Id Pedido");
        modeloCobrar.addColumn("Hora");
        modeloCobrar.addColumn("Producto");
        modeloCobrar.addColumn("Cantidad");
        modeloCobrar.addColumn("Precio unidad");
        modeloCobrar.addColumn("Total");
        acobrar.setModel(modeloCobrar);
    }
    private void borrarFilas3(){
        int filas = acobrar.getRowCount() -1;
        for (int f = filas; f >= 0; f--) {
            modeloCobrar.removeRow(f);
        }
    }
    private void armarTablaPagos(){
        borrarFilas2();
        for(Pedido pedido:listaPagos){
            Producto producto=productoData.buscarProductoporId(pedido.getIdProducto());
            String nombre=producto.getNombreProducto();
            int precio=producto.getPrecio();
            modeloPago.addRow(new Object[]{pedido.getIdPedido(), pedido.getHoraPedido(), nombre, pedido.getCantidadProducto(), precio, pedido.getCantidadProducto()*precio});
        }
    }
    private String Estado(Pedido pedido){
        String estado;
        if(pedido.isEstado()==true){
            if(pedido.isEstadoPago()==true){
                estado="Pago";
            }
            else{
            estado="Entregado";
            }
        }
        else{
            estado="Pendiente";
        }
        return estado;
    }
    private void armarTablaPendiente(){
        borrarFilas1();
        for(Pedido pedido:listaPedidos){
            Producto producto=productoData.buscarProductoporId(pedido.getIdProducto());
            String nombre=producto.getNombreProducto();
            int precio=producto.getPrecio();
            modeloPediente.addRow(new Object[]{pedido.getIdPedido(), pedido.getHoraPedido(), nombre, pedido.getCantidadProducto(), precio, pedido.getCantidadProducto()*precio, Estado(pedido)});
        }
    }
    private void armarTablaCobrar(){
        borrarFilas3();
        for(Pedido pedido:listaGuardar){
            Producto producto=productoData.buscarProductoporId(pedido.getIdProducto());
            String nombre=producto.getNombreProducto();
            int precio=producto.getPrecio();
            modeloCobrar.addRow(new Object[]{pedido.getIdPedido(), pedido.getHoraPedido(), nombre, pedido.getCantidadProducto(), precio, pedido.getCantidadProducto()*precio});
        }
    }
    private void intercambio(){
        pedido.setEstadoPago(true);
        for(Pedido p:listaPedidos){
            if(p.getIdPedido()==pedido.getIdPedido()){
                listaGuardar.add(pedido);
            }
        }
        int tamaño=listaPedidos.size();
        for(int i=0; i<tamaño; i++){
            if(listaPedidos.get(i).getIdPedido()==pedido.getIdPedido()){
                listaPedidos.remove(i);
                break;
            }
        }
    }
    private void intercambioC(){
        pedido.setEstadoPago(false);
        for(Pedido p:listaGuardar){
            if(p.getIdPedido()==pedido.getIdPedido()){
                listaPedidos.add(pedido);
            }
        }
        int tamaño=listaGuardar.size();
        for(int i=0; i<tamaño; i++){
            if(listaGuardar.get(i).getIdPedido()==pedido.getIdPedido()){
                listaGuardar.remove(i);
                break;
            }
        }
    }
    private void total(){
        int suma=0;
        for(Pedido p:listaGuardar){
            Producto producto=productoData.buscarProductoporId(p.getIdProducto());
            suma=producto.getPrecio()*p.getCantidadProducto()+suma;
        }
        Total.setText(suma+"");
    }
}
